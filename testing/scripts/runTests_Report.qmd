---
title: "GMACS Tests Report"
crossref:
  chapters: false      # prepend label reference numbers by chater number?
  fig-title: Figure    # for caption: default is "Figure")
  tbl-title: Table     # for caption: default is "Table")
  title-delim: "."     # for caption: default is ":")
  fig-prefix: Figure   # for in-text (use [-@fig-ref] to drop prefix in text)
  tbl-prefix: Table    # for in-text (use [-@tbl-ref] to drop prefix in text)
  fig-labels: arabic    # options are arabic, roman, roman i, alpha x, alpha X; latter two starting from x/X
  tbl-labels: arabic    # options are arabic, roman, roman i, alpha x, alpha X; latter two starting from x/X
  subref-labels: alpha a # options are arabic, roman, roman i, alpha x, alpha X; latter two starting from x/X
  ref-hyperlink: true    # references are hyperlinked if true
format:
  html:
    df-print: paged
    toc: true
    toc-location: right
    fig-width: 6.5
    fig-asp: 0.6
    fig-dpi: 100
    embed-resources: true
    include-in-header: 
      - '`r system.file("files/in-line_math_mode.html",package="wtsQMD")`'
  pdf:
    documentclass: scrartcl
    toc: false
    fig_crop: false
    keep-tex: false
    geometry:
      - left=1.0in
      - right=1.0in
      - top=1.0in
      - bottom=1.0in
      - textwidth=6.5in
      - showframe=false
    include-in-header: 
      - text: |
          \usepackage{placeins}
          \extrafloats{500}
          \maxdeadcycles=10000
      - file: '`r system.file("files/ltx_ExtraLatexIncludes.tex",package="wtsQMD")`'
keep-md: true
concordance: true
echo: false
results: false
params:
  fn: "testing_results.RData"
---

```{r setup}
  require(wtsQMD,quietly=TRUE);
  require(ggplot2,quietly=TRUE);
  require(tables,quietly=TRUE);
  # system.file("files/qmd_setup.R",package="wtsQMD")
  if (wtsQMD::isOutputPDF()){
    root = knitr::opts_knit$get("root.dir");
    child_path=fastmap::faststack();#--stack for paths
    child_path$push(root);#--set toplevel folder to root
  }
  fn = file.path(params$fn);
  res = wtsUtilities::getObj(fn);
  mds = names(res);
  lstTbls = list();
  lstFigs = list();
  dirFigs = dirname(knitr::fig_path());
  if (!dir.exists(dirFigs)) dir.create(dirFigs,recursive=TRUE);
```

```{r}
#| label: fig_Res
#| results: asis
#| fig-width: 6.0
#| fig-asp: 0.8
  makePlot<-function(dfr,var){
    p = ggplot(dfr,aes(x=Year,y={{var}},colour=model)) + 
          geom_line() + geom_point() + wtsPlots::getStdTheme() + 
          theme(legend.position="inside",
                legend.position.inside=c(0.99,0.99),
                legend.justification=c(1,1));
    return(p)
  }
  ##--loop over models
  for (md in mds){
    #--testing: md = names(res)[7];
    cat("## Results for",md,"\n\n");
    if (is.null(res[[md]]$ran)) {
      cat("###--'ran' flag is not present. Check results carefully for duplication with previous model.\n\n")
    }
    if ((!is.null(res[[md]]$ran))&&(!res[[md]]$ran)){
      cat("Model run **failed**. No results to show.\n\n")
    } else {
      if (!is.null(res[[md]]$allout$res)){
        cat(paste("*",res[[md]]$allout$res))
        cat("\n\n")
      }
      ###--comparisons from par files----
      if (is.null(res[[md]]$pars)){
        cat("Old parameter values were not available for comparison. \n\n")
      } else {
        ##--objective function value
        dfrPars = res[[md]]$pars[1,];
        cat(paste0("The objective function values for the new and old models are \n\n",
                   "* ",prettyNum(dfrPars$new)," and ",prettyNum(dfrPars$old)," (|diff| = ",prettyNum(dfrPars$abs_dif),").\n\n"));
        ##--max gradient value
        dfrPars = res[[md]]$pars[2,];
        cat(paste0("The maximum gradient values for the new and old models at convergence are \n\n",
                   "* ",prettyNum(dfrPars$new)," and ",prettyNum(dfrPars$old)," (|diff| = ",prettyNum(dfrPars$abs_dif),").\n\n"));
      }
      
      ###--likelihood comparisons----
      #cat("Values for various likelihoods are given in Tables ?? by type and fleet.\n ");
      lksNewByFlt = res[[md]]$allOutNew$Likelihoods_by_type_and_fleet;
      lksOldByFlt = res[[md]]$allOutOld$Likelihoods_by_type_and_fleet;
      names(lksNewByFlt$Recruitment_penalities) = "Net_likelihood";
      names(lksNewByFlt$Growth_likelihood)      = "Net_likelihood";
      names(lksOldByFlt$Recruitment_penalities) = "Net_likelihood";
      names(lksOldByFlt$Growth_likelihood)      = "Net_likelihood";
      getKbl<-function(cols){
        lst = list();
        for (col in cols){
          if (!is.null(lksNewByFlt[[col]])&&!is.null(lksOldByFlt[[col]])){
            dfr = dplyr::bind_rows(dplyr::bind_cols(lksNewByFlt[[col]]) |> dplyr::mutate(model="new",
                                                                                         type=col,
                                                                                         index=dplyr::row_number()),
                                    dplyr::bind_cols(lksOldByFlt[[col]]) |> dplyr::mutate(model="old",
                                                                                          type=col,
                                                                                          index=dplyr::row_number())) |>
                    dplyr::select(model,type,index,likelihood=Net_likelihood) |> 
                    tidyr::pivot_wider(names_from=model,values_from=likelihood) |> 
                    dplyr::mutate(difference=new-old);
            lst[[col]] = dfr;
            rm(dfr);
          }
        }
        dfr = dplyr::bind_rows(lst) |> dplyr::mutate(type=stringr::str_replace(type,"_"," ")); rm(lst);
        tblr = tabular(Factor(type)*Factor(index)~(new+old+difference)*sum*DropEmpty(empty="--"),data=dfr);
        colLabels(tblr) = colLabels(tblr)[1,];
        kblr = wtsQMD::convert_tblr_to_kbl(tblr,col_spec=c(1,2),isPDF=wtsQMD::isOutputPDF());
        return(kblr)
      }
      mdp = stringr::str_replace_all(md,"_","-");
      kbl = getKbl(cols=c("Catches","Index","Size_composition","Tagging","Growth_likelihood","Recruitment_penalties"));
      lbl = paste0("tbl-Likes",mdp);
      cap = paste0("Comparison of various likelihoods by type and fleet (the latter indicated by an index value) for ",md,".");
      cat(paste0("See [@tbl-Likes",mdp,"] for a comparion of various likelihoods ",
                 "by type and fleet (the latter indicated by an index value).\n\n"))
      lstTbls = c(lstTbls,insertKblIntoQMD(kbl,lbl,cap,ori="P"));
      rm(kbl,lbl,cap);
  
      ###--plot comparisons----
      smryNew = res[[md]]$allOutNew$Summary;
      cols = names(smryNew);
      if (any(stringr::str_count(cols,"female")>0)){
        cols = c(cols[1:12],"log(Recruits_female)","SD(log(Recruits_female))",cols[13:(length(cols)-2)])
        names(smryNew) = cols;
      }
      dfrNew = smryNew |> 
                 dplyr::select(Year,SSB,Recruit_male,Total_mortality,Retained_mortality) |> 
                 dplyr::mutate(dplyr::across(where(is.character),as.numeric)) |> 
                 dplyr::mutate(model="new");
      smryOld = res[[md]]$allOutOld$Summary;
      cols = names(smryOld);
      if (any(stringr::str_count(cols,"female")>0)){
        cols = c(cols[1:12],"log(Recruits_female)","SD(log(Recruits_female))",cols[13:(length(cols)-2)])
        names(smryOld) = cols;
      }
      dfrOld = smryOld |> 
                 dplyr::select(Year,SSB,Recruit_male,Total_mortality,Retained_mortality) |> 
                 dplyr::mutate(dplyr::across(where(is.character),as.numeric)) |> 
                 dplyr::mutate(model="old");
      dfrComp = dplyr::bind_rows(dfrNew,dfrOld);
      p1 = makePlot(dfrComp,Recruit_male) + theme(legend.position="none");
      p2 = makePlot(dfrComp,SSB);
      p3 = makePlot(dfrComp,Total_mortality) + theme(legend.position="none");
      p4 = makePlot(dfrComp,Retained_mortality) + theme(legend.position="none");
      pg = cowplot::plot_grid(p1,p2,p3,p4,nrow=2);
      lbl = wtsQMD::getLabel(xtra=md);
      pth = wtsQMD::getFigFN(xtra=md);
      lstFigs = c(lstFigs,wtsQMD::printGGplot(pg,cap=paste0("Results for ",md,"."),ori="P",lbl=lbl,pth=pth));
      cat(paste0("See comparison plots in Figure [-@",lbl,"].\n\n"));
    }
  }
```

<!-- tables, if not child doc and lstTbls is not empty -->
```{r}
#| label: tables
#| eval: !expr '(!wtsQMD::isOutputHTML()) && (!knitr::opts_knit$get("child"))'
#| results: asis
  source(system.file("files/printTablesSectionFromList.R",package="wtsQMD"));
```

<!-- figures, if not child doc and lstFigs is not empty -->
```{r}
#| label: figures
#| eval: !expr '(!wtsQMD::isOutputHTML()) && (!knitr::opts_knit$get("child"))'
#| results: asis
  source(system.file("files/printFiguresSectionFromList.R",package="wtsQMD"));
```
